{"ast":null,"code":"// @ts-nocheck\nimport { __assign, __extends } from \"tslib\"; // @generated\n\nimport { TYPE } from './types';\nimport { parseDateTimeSkeleton, parseNumberSkeleton } from './skeleton';\n\nvar SyntaxError =\n/** @class */\nfunction (_super) {\n  __extends(SyntaxError, _super);\n\n  function SyntaxError(message, expected, found, location) {\n    var _this = _super.call(this) || this;\n\n    _this.message = message;\n    _this.expected = expected;\n    _this.found = found;\n    _this.location = location;\n    _this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(_this, SyntaxError);\n    }\n\n    return _this;\n  }\n\n  SyntaxError.buildMessage = function (expected, found) {\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n\n        case \"class\":\n          var escapedParts = expectation.parts.map(function (part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n\n        case \"any\":\n          return \"any character\";\n\n        case \"end\":\n          return \"end of input\";\n\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1) {\n      var descriptions = expected1.map(describeExpectation);\n      var i;\n      var j;\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  return SyntaxError;\n}(Error);\n\nexport { SyntaxError };\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    start: peg$parsestart\n  };\n  var peg$startRuleFunction = peg$parsestart;\n\n  var peg$c0 = function peg$c0() {\n    return !ignoreTag;\n  };\n\n  var peg$c1 = function peg$c1(x) {\n    return x;\n  };\n\n  var peg$c2 = function peg$c2() {\n    return ignoreTag;\n  };\n\n  var peg$c3 = \"<\";\n  var peg$c4 = peg$literalExpectation(\"<\", false);\n\n  var peg$c5 = function peg$c5(parts) {\n    return parts.join('');\n  };\n\n  var peg$c6 = function peg$c6() {\n    return '<';\n  };\n\n  var peg$c7 = function peg$c7(messageText) {\n    return __assign({\n      type: TYPE.literal,\n      value: messageText\n    }, insertLocation());\n  };\n\n  var peg$c8 = \"#\";\n  var peg$c9 = peg$literalExpectation(\"#\", false);\n\n  var peg$c10 = function peg$c10() {\n    return __assign({\n      type: TYPE.pound\n    }, insertLocation());\n  };\n\n  var peg$c11 = peg$otherExpectation(\"tagElement\");\n\n  var peg$c12 = function peg$c12(open, children, close) {\n    if (open !== close) {\n      error(\"Mismatch tag \\\"\" + open + \"\\\" !== \\\"\" + close + \"\\\"\", location());\n    }\n\n    return __assign({\n      type: TYPE.tag,\n      value: open,\n      children: children\n    }, insertLocation());\n  };\n\n  var peg$c13 = \"/>\";\n  var peg$c14 = peg$literalExpectation(\"/>\", false);\n\n  var peg$c15 = function peg$c15(value) {\n    return __assign({\n      type: TYPE.literal,\n      value: value.join('')\n    }, insertLocation());\n  };\n\n  var peg$c16 = \">\";\n  var peg$c17 = peg$literalExpectation(\">\", false);\n\n  var peg$c18 = function peg$c18(tag) {\n    return tag;\n  };\n\n  var peg$c19 = \"</\";\n  var peg$c20 = peg$literalExpectation(\"</\", false);\n  var peg$c21 = peg$otherExpectation(\"argumentElement\");\n  var peg$c22 = \"{\";\n  var peg$c23 = peg$literalExpectation(\"{\", false);\n  var peg$c24 = \"}\";\n  var peg$c25 = peg$literalExpectation(\"}\", false);\n\n  var peg$c26 = function peg$c26(value) {\n    return __assign({\n      type: TYPE.argument,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c27 = peg$otherExpectation(\"numberSkeletonId\");\n  var peg$c28 = /^['\\/{}]/;\n  var peg$c29 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n  var peg$c30 = peg$anyExpectation();\n  var peg$c31 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n  var peg$c32 = \"/\";\n  var peg$c33 = peg$literalExpectation(\"/\", false);\n\n  var peg$c34 = function peg$c34(option) {\n    return option;\n  };\n\n  var peg$c35 = peg$otherExpectation(\"numberSkeletonToken\");\n\n  var peg$c36 = function peg$c36(stem, options) {\n    return {\n      stem: stem,\n      options: options\n    };\n  };\n\n  var peg$c37 = function peg$c37(tokens) {\n    return __assign({\n      type: 0\n      /* number */\n      ,\n      tokens: tokens,\n      parsedOptions: shouldParseSkeleton ? parseNumberSkeleton(tokens) : {}\n    }, insertLocation());\n  };\n\n  var peg$c38 = \"::\";\n  var peg$c39 = peg$literalExpectation(\"::\", false);\n\n  var peg$c40 = function peg$c40(skeleton) {\n    return skeleton;\n  };\n\n  var peg$c41 = function peg$c41() {\n    messageCtx.push('numberArgStyle');\n    return true;\n  };\n\n  var peg$c42 = function peg$c42(style) {\n    messageCtx.pop();\n    return style.replace(/\\s*$/, '');\n  };\n\n  var peg$c43 = \",\";\n  var peg$c44 = peg$literalExpectation(\",\", false);\n  var peg$c45 = \"number\";\n  var peg$c46 = peg$literalExpectation(\"number\", false);\n\n  var peg$c47 = function peg$c47(value, type, style) {\n    return __assign({\n      type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time,\n      style: style && style[2],\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c48 = \"'\";\n  var peg$c49 = peg$literalExpectation(\"'\", false);\n  var peg$c50 = /^[^']/;\n  var peg$c51 = peg$classExpectation([\"'\"], true, false);\n  var peg$c52 = /^[^a-zA-Z'{}]/;\n  var peg$c53 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n  var peg$c54 = /^[a-zA-Z]/;\n  var peg$c55 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n\n  var peg$c56 = function peg$c56(pattern) {\n    return __assign({\n      type: 1\n      /* dateTime */\n      ,\n      pattern: pattern,\n      parsedOptions: shouldParseSkeleton ? parseDateTimeSkeleton(pattern) : {}\n    }, insertLocation());\n  };\n\n  var peg$c57 = function peg$c57() {\n    messageCtx.push('dateOrTimeArgStyle');\n    return true;\n  };\n\n  var peg$c58 = \"date\";\n  var peg$c59 = peg$literalExpectation(\"date\", false);\n  var peg$c60 = \"time\";\n  var peg$c61 = peg$literalExpectation(\"time\", false);\n  var peg$c62 = \"plural\";\n  var peg$c63 = peg$literalExpectation(\"plural\", false);\n  var peg$c64 = \"selectordinal\";\n  var peg$c65 = peg$literalExpectation(\"selectordinal\", false);\n  var peg$c66 = \"offset:\";\n  var peg$c67 = peg$literalExpectation(\"offset:\", false);\n\n  var peg$c68 = function peg$c68(value, pluralType, offset, options) {\n    return __assign({\n      type: TYPE.plural,\n      pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal',\n      value: value,\n      offset: offset ? offset[2] : 0,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c69 = \"select\";\n  var peg$c70 = peg$literalExpectation(\"select\", false);\n\n  var peg$c71 = function peg$c71(value, options) {\n    return __assign({\n      type: TYPE.select,\n      value: value,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c72 = \"=\";\n  var peg$c73 = peg$literalExpectation(\"=\", false);\n\n  var peg$c74 = function peg$c74(id) {\n    messageCtx.push('select');\n    return true;\n  };\n\n  var peg$c75 = function peg$c75(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c76 = function peg$c76(id) {\n    messageCtx.push('plural');\n    return true;\n  };\n\n  var peg$c77 = function peg$c77(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c78 = peg$otherExpectation(\"whitespace\");\n  var peg$c79 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  var peg$c80 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n  var peg$c81 = peg$otherExpectation(\"syntax pattern\");\n  var peg$c82 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n  var peg$c83 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n  var peg$c84 = peg$otherExpectation(\"optional whitespace\");\n  var peg$c85 = peg$otherExpectation(\"number\");\n  var peg$c86 = \"-\";\n  var peg$c87 = peg$literalExpectation(\"-\", false);\n\n  var peg$c88 = function peg$c88(negative, num) {\n    return num ? negative ? -num : num : 0;\n  };\n\n  var peg$c89 = peg$otherExpectation(\"apostrophe\");\n  var peg$c90 = peg$otherExpectation(\"double apostrophes\");\n  var peg$c91 = \"''\";\n  var peg$c92 = peg$literalExpectation(\"''\", false);\n\n  var peg$c93 = function peg$c93() {\n    return \"'\";\n  };\n\n  var peg$c94 = function peg$c94(escapedChar, quotedChars) {\n    return escapedChar + quotedChars.replace(\"''\", \"'\");\n  };\n\n  var peg$c95 = function peg$c95(x) {\n    return x !== '<' && x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}');\n  };\n\n  var peg$c96 = \"\\n\";\n  var peg$c97 = peg$literalExpectation(\"\\n\", false);\n\n  var peg$c98 = function peg$c98(x) {\n    return x === '<' || x === '>' || x === '{' || x === '}' || isInPluralOption() && x === '#';\n  };\n\n  var peg$c99 = peg$otherExpectation(\"argNameOrNumber\");\n  var peg$c100 = peg$otherExpectation(\"validTag\");\n  var peg$c101 = peg$otherExpectation(\"argNumber\");\n  var peg$c102 = \"0\";\n  var peg$c103 = peg$literalExpectation(\"0\", false);\n\n  var peg$c104 = function peg$c104() {\n    return 0;\n  };\n\n  var peg$c105 = /^[1-9]/;\n  var peg$c106 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$c107 = /^[0-9]/;\n  var peg$c108 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n\n  var peg$c109 = function peg$c109(digits) {\n    return parseInt(digits.join(''), 10);\n  };\n\n  var peg$c110 = peg$otherExpectation(\"argName\");\n  var peg$c111 = peg$otherExpectation(\"tagName\");\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n  }\n\n  function error(message, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text1,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message, location1) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1, found, location1) {\n    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n  }\n\n  function peg$parsestart() {\n    var s0;\n    s0 = peg$parsemessage();\n    return s0;\n  }\n\n  function peg$parsemessage() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsemessageElement();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsemessageElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageElement() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c0();\n\n    if (s1) {\n      s1 = undefined;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetagElement();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteralElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesimpleFormatElement();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsepluralElement();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseselectElement();\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsepoundElement();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageText() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c2();\n\n    if (s1) {\n      s1 = undefined;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsedoubleApostrophes();\n\n      if (s3 === peg$FAILED) {\n        s3 = peg$parsequotedString();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseunquotedString();\n\n          if (s3 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s3 = peg$c3;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsedoubleApostrophes();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsequotedString();\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseunquotedString();\n\n              if (s3 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 60) {\n                  s3 = peg$c3;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c4);\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c5(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsedoubleApostrophes();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequotedString();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseunquotedString();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsenonTagStartingAngleBracket();\n          }\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsedoubleApostrophes();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseunquotedString();\n\n              if (s2 === peg$FAILED) {\n                s2 = peg$parsenonTagStartingAngleBracket();\n              }\n            }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c5(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenonTagStartingAngleBracket() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseopeningTag();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseclosingTag();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseselfClosingTag();\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = undefined;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s2 = peg$c3;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c4);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteralElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsemessageText();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c7(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsepoundElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c8;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c9);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c10();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsetagElement() {\n    var s0, s1, s2, s3;\n    peg$silentFails++;\n    s0 = peg$parseselfClosingTag();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseopeningTag();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessage();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseclosingTag();\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c12(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseselfClosingTag() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s2 = peg$c3;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c4);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsevalidTag();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse_();\n\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c13) {\n            s5 = peg$c13;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s2 = [s2, s3, s4, s5];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c15(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseopeningTag() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s1 = peg$c3;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c4);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsevalidTag();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s3 = peg$c16;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c17);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c18(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseclosingTag() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c19) {\n      s1 = peg$c19;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c20);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsevalidTag();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s3 = peg$c16;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c17);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c18(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargumentElement() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c22;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c24;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c25);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c26(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c21);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonId() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      if (peg$c28.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c30);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          if (peg$c28.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c29);\n            }\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c30);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c27);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonTokenOption() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c34(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c31);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonToken() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsenumberSkeletonTokenOption();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenumberSkeletonTokenOption();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c35);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeleton() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsenumberSkeletonToken();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsenumberSkeletonToken();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c37(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsenumberArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c38) {\n      s1 = peg$c38;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c41();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c42(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c22;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c43;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c44);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c45) {\n                  s7 = peg$c45;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c46);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c43;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c44);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsenumberArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c24;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c25);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c47(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonLiteral() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c48;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c49);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsedoubleApostrophes();\n\n      if (s3 === peg$FAILED) {\n        if (peg$c50.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c51);\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsedoubleApostrophes();\n\n          if (s3 === peg$FAILED) {\n            if (peg$c50.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c51);\n              }\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c48;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c49);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      s1 = peg$parsedoubleApostrophes();\n\n      if (s1 === peg$FAILED) {\n        if (peg$c52.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c53);\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsedoubleApostrophes();\n\n          if (s1 === peg$FAILED) {\n            if (peg$c52.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c53);\n              }\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonPattern() {\n    var s0, s1;\n    s0 = [];\n\n    if (peg$c54.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (peg$c54.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c55);\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeleton() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$parsedateTimeSkeletonLiteral();\n\n    if (s3 === peg$FAILED) {\n      s3 = peg$parsedateTimeSkeletonPattern();\n    }\n\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsedateTimeSkeletonLiteral();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsedateTimeSkeletonPattern();\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c56(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsedateOrTimeArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c38) {\n      s1 = peg$c38;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedateTimeSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c57();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c42(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateOrTimeFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c22;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c43;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c44);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c58) {\n                  s7 = peg$c58;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c59);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c60) {\n                    s7 = peg$c60;\n                    peg$currPos += 4;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c61);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c43;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c44);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsedateOrTimeArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c24;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c25);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c47(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimpleFormatElement() {\n    var s0;\n    s0 = peg$parsenumberFormatElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedateOrTimeFormatElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c22;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c43;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c44);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c62) {\n                  s7 = peg$c62;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c63);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13) === peg$c64) {\n                    s7 = peg$c64;\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c65);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c43;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c44);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n\n                        if (input.substr(peg$currPos, 7) === peg$c66) {\n                          s12 = peg$c66;\n                          peg$currPos += 7;\n                        } else {\n                          s12 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c67);\n                          }\n                        }\n\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse_();\n\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsenumber();\n\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsepluralOption();\n\n                            if (s14 !== peg$FAILED) {\n                              while (s14 !== peg$FAILED) {\n                                s13.push(s14);\n                                s14 = peg$parsepluralOption();\n                              }\n                            } else {\n                              s13 = peg$FAILED;\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c24;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c25);\n                                  }\n                                }\n\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c68(s3, s7, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c22;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c43;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c44);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c69) {\n                  s7 = peg$c69;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c70);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c43;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c44);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseselectOption();\n\n                        if (s12 !== peg$FAILED) {\n                          while (s12 !== peg$FAILED) {\n                            s11.push(s12);\n                            s12 = peg$parseselectOption();\n                          }\n                        } else {\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s13 = peg$c24;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c25);\n                              }\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c71(s3, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralRuleSelectValue() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s2 = peg$c72;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c73);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsenumber();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargName();\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargName();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c74(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c24;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c25);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c75(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepluralRuleSelectValue();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c76(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c24;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c25);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c77(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c79.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c80);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c78);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepatternSyntax() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c82.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c81);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewhiteSpace();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewhiteSpace();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c86;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c87);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c88(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c85);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseapostrophe() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s0 = peg$c48;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c49);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c89);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedoubleApostrophes() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c91) {\n      s1 = peg$c91;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c92);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c93();\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c90);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotedString() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c48;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c49);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseescapedChar();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n\n        if (input.substr(peg$currPos, 2) === peg$c91) {\n          s5 = peg$c91;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c92);\n          }\n        }\n\n        if (s5 === peg$FAILED) {\n          if (peg$c50.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c51);\n            }\n          }\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n\n          if (input.substr(peg$currPos, 2) === peg$c91) {\n            s5 = peg$c91;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c92);\n            }\n          }\n\n          if (s5 === peg$FAILED) {\n            if (peg$c50.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c51);\n              }\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c48;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c49);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c94(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunquotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c30);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c95(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s1 = peg$c96;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c97);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseescapedChar() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c30);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c98(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNameOrNumber() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseargName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c99);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalidTag() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsetagName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c100);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNumber() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c102;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c103);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c104();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c105.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c106);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (peg$c107.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c108);\n          }\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n\n          if (peg$c107.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c108);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c109(s1);\n      }\n\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c101);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      s4 = peg$parsepatternSyntax();\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c30);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          s4 = peg$parsepatternSyntax();\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c30);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c110);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s2 = peg$c86;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c87);\n      }\n    }\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      peg$silentFails++;\n      s4 = peg$parsewhiteSpace();\n\n      if (s4 === peg$FAILED) {\n        s4 = peg$parsepatternSyntax();\n      }\n\n      peg$silentFails--;\n\n      if (s4 === peg$FAILED) {\n        s3 = undefined;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c30);\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s2 = peg$c86;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c87);\n          }\n        }\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parsewhiteSpace();\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n          }\n\n          peg$silentFails--;\n\n          if (s4 === peg$FAILED) {\n            s3 = undefined;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c111);\n      }\n    }\n\n    return s0;\n  }\n\n  var messageCtx = ['root'];\n\n  function isNestedMessageText() {\n    return messageCtx.length > 1;\n  }\n\n  function isInPluralOption() {\n    return messageCtx[messageCtx.length - 1] === 'plural';\n  }\n\n  function insertLocation() {\n    return options && options.captureLocation ? {\n      location: location()\n    } : {};\n  }\n\n  var ignoreTag = options && options.ignoreTag;\n  var shouldParseSkeleton = options && options.shouldParseSkeleton;\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nexport var pegParse = peg$parse;","map":{"version":3,"sources":["/Users/samtoll/Desktop/FinalProject/react-app/node_modules/intl-messageformat-parser/lib/src/parser.js"],"names":["__assign","__extends","TYPE","parseDateTimeSkeleton","parseNumberSkeleton","SyntaxError","_super","message","expected","found","location","_this","call","name","Error","captureStackTrace","buildMessage","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","s","replace","classEscape","describeExpectation","expectation","type","text","escapedParts","parts","map","part","Array","isArray","inverted","description","describeExpected","expected1","descriptions","i","j","sort","length","slice","join","describeFound","found1","peg$parse","input","options","undefined","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","ignoreTag","peg$c1","x","peg$c2","peg$c3","peg$c4","peg$literalExpectation","peg$c5","peg$c6","peg$c7","messageText","literal","value","insertLocation","peg$c8","peg$c9","peg$c10","pound","peg$c11","peg$otherExpectation","peg$c12","open","children","close","error","tag","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","argument","peg$c27","peg$c28","peg$c29","peg$classExpectation","peg$c30","peg$anyExpectation","peg$c31","peg$c32","peg$c33","peg$c34","option","peg$c35","peg$c36","stem","peg$c37","tokens","parsedOptions","shouldParseSkeleton","peg$c38","peg$c39","peg$c40","skeleton","peg$c41","messageCtx","push","peg$c42","style","pop","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","number","date","time","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","pattern","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","pluralType","offset","plural","reduce","all","_a","id","optionLocation","peg$c69","peg$c70","peg$c71","select","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","negative","num","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","escapedChar","quotedChars","peg$c95","isInPluralOption","isNestedMessageText","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","digits","parseInt","peg$c110","peg$c111","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","location1","peg$buildStructuredError","peg$buildSimpleError","text1","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","s0","peg$parsemessage","s1","peg$parsemessageElement","s2","peg$parsetagElement","peg$parseliteralElement","peg$parseargumentElement","peg$parsesimpleFormatElement","peg$parsepluralElement","peg$parseselectElement","peg$parsepoundElement","peg$parsemessageText","s3","peg$parsedoubleApostrophes","peg$parsequotedString","peg$parseunquotedString","peg$parsenonTagStartingAngleBracket","peg$parseopeningTag","peg$parseclosingTag","peg$parseselfClosingTag","s4","s5","peg$parsevalidTag","peg$parse_","substr","peg$parseargNameOrNumber","peg$parsenumberSkeletonId","peg$parsewhiteSpace","test","charAt","peg$parsenumberSkeletonTokenOption","peg$parsenumberSkeletonToken","peg$parsenumberSkeleton","peg$parsenumberArgStyle","peg$parsenumberFormatElement","s6","s7","s8","s9","s10","s11","s12","peg$parsedateTimeSkeletonLiteral","peg$parsedateTimeSkeletonPattern","peg$parsedateTimeSkeleton","peg$parsedateOrTimeArgStyle","peg$parsedateOrTimeFormatElement","s13","s14","s15","peg$parsenumber","peg$parsepluralOption","peg$parseselectOption","peg$parsepluralRuleSelectValue","peg$parseargName","peg$parsepatternSyntax","peg$parseargNumber","peg$parseapostrophe","peg$parseescapedChar","peg$parsetagName","captureLocation","pegParse"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { __assign, __extends } from \"tslib\";\n// @generated\nimport { TYPE, } from './types';\nimport { parseDateTimeSkeleton, parseNumberSkeleton } from './skeleton';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function () { return !ignoreTag; };\n    var peg$c1 = function (x) { return x; };\n    var peg$c2 = function () { return ignoreTag; };\n    var peg$c3 = \"<\";\n    var peg$c4 = peg$literalExpectation(\"<\", false);\n    var peg$c5 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c6 = function () { return '<'; };\n    var peg$c7 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c8 = \"#\";\n    var peg$c9 = peg$literalExpectation(\"#\", false);\n    var peg$c10 = function () {\n        return __assign({ type: TYPE.pound }, insertLocation());\n    };\n    var peg$c11 = peg$otherExpectation(\"tagElement\");\n    var peg$c12 = function (open, children, close) {\n        if (open !== close) {\n            error(\"Mismatch tag \\\"\" + open + \"\\\" !== \\\"\" + close + \"\\\"\", location());\n        }\n        return __assign({ type: TYPE.tag, value: open, children: children }, insertLocation());\n    };\n    var peg$c13 = \"/>\";\n    var peg$c14 = peg$literalExpectation(\"/>\", false);\n    var peg$c15 = function (value) {\n        return __assign({ type: TYPE.literal, value: value.join('') }, insertLocation());\n    };\n    var peg$c16 = \">\";\n    var peg$c17 = peg$literalExpectation(\">\", false);\n    var peg$c18 = function (tag) { return tag; };\n    var peg$c19 = \"</\";\n    var peg$c20 = peg$literalExpectation(\"</\", false);\n    var peg$c21 = peg$otherExpectation(\"argumentElement\");\n    var peg$c22 = \"{\";\n    var peg$c23 = peg$literalExpectation(\"{\", false);\n    var peg$c24 = \"}\";\n    var peg$c25 = peg$literalExpectation(\"}\", false);\n    var peg$c26 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c27 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c28 = /^['\\/{}]/;\n    var peg$c29 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c30 = peg$anyExpectation();\n    var peg$c31 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c32 = \"/\";\n    var peg$c33 = peg$literalExpectation(\"/\", false);\n    var peg$c34 = function (option) { return option; };\n    var peg$c35 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c36 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c37 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens, parsedOptions: shouldParseSkeleton ? parseNumberSkeleton(tokens) : {} }, insertLocation());\n    };\n    var peg$c38 = \"::\";\n    var peg$c39 = peg$literalExpectation(\"::\", false);\n    var peg$c40 = function (skeleton) { return skeleton; };\n    var peg$c41 = function () { messageCtx.push('numberArgStyle'); return true; };\n    var peg$c42 = function (style) {\n        messageCtx.pop();\n        return style.replace(/\\s*$/, '');\n    };\n    var peg$c43 = \",\";\n    var peg$c44 = peg$literalExpectation(\",\", false);\n    var peg$c45 = \"number\";\n    var peg$c46 = peg$literalExpectation(\"number\", false);\n    var peg$c47 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c48 = \"'\";\n    var peg$c49 = peg$literalExpectation(\"'\", false);\n    var peg$c50 = /^[^']/;\n    var peg$c51 = peg$classExpectation([\"'\"], true, false);\n    var peg$c52 = /^[^a-zA-Z'{}]/;\n    var peg$c53 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c54 = /^[a-zA-Z]/;\n    var peg$c55 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c56 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern, parsedOptions: shouldParseSkeleton ? parseDateTimeSkeleton(pattern) : {} }, insertLocation());\n    };\n    var peg$c57 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };\n    var peg$c58 = \"date\";\n    var peg$c59 = peg$literalExpectation(\"date\", false);\n    var peg$c60 = \"time\";\n    var peg$c61 = peg$literalExpectation(\"time\", false);\n    var peg$c62 = \"plural\";\n    var peg$c63 = peg$literalExpectation(\"plural\", false);\n    var peg$c64 = \"selectordinal\";\n    var peg$c65 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c66 = \"offset:\";\n    var peg$c67 = peg$literalExpectation(\"offset:\", false);\n    var peg$c68 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c69 = \"select\";\n    var peg$c70 = peg$literalExpectation(\"select\", false);\n    var peg$c71 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c72 = \"=\";\n    var peg$c73 = peg$literalExpectation(\"=\", false);\n    var peg$c74 = function (id) { messageCtx.push('select'); return true; };\n    var peg$c75 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c76 = function (id) { messageCtx.push('plural'); return true; };\n    var peg$c77 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c78 = peg$otherExpectation(\"whitespace\");\n    var peg$c79 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    var peg$c80 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n    var peg$c81 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c82 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c83 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c84 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c85 = peg$otherExpectation(\"number\");\n    var peg$c86 = \"-\";\n    var peg$c87 = peg$literalExpectation(\"-\", false);\n    var peg$c88 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c89 = peg$otherExpectation(\"apostrophe\");\n    var peg$c90 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c91 = \"''\";\n    var peg$c92 = peg$literalExpectation(\"''\", false);\n    var peg$c93 = function () { return \"'\"; };\n    var peg$c94 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c95 = function (x) {\n        return (x !== '<' &&\n            x !== '{' &&\n            !(isInPluralOption() && x === '#') &&\n            !(isNestedMessageText() && x === '}'));\n    };\n    var peg$c96 = \"\\n\";\n    var peg$c97 = peg$literalExpectation(\"\\n\", false);\n    var peg$c98 = function (x) {\n        return x === '<' || x === '>' || x === '{' || x === '}' || (isInPluralOption() && x === '#');\n    };\n    var peg$c99 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c100 = peg$otherExpectation(\"validTag\");\n    var peg$c101 = peg$otherExpectation(\"argNumber\");\n    var peg$c102 = \"0\";\n    var peg$c103 = peg$literalExpectation(\"0\", false);\n    var peg$c104 = function () { return 0; };\n    var peg$c105 = /^[1-9]/;\n    var peg$c106 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c107 = /^[0-9]/;\n    var peg$c108 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c109 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c110 = peg$otherExpectation(\"argName\");\n    var peg$c111 = peg$otherExpectation(\"tagName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        peg$savedPos = peg$currPos;\n        s1 = peg$c0();\n        if (s1) {\n            s1 = undefined;\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsetagElement();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseliteralElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parseargumentElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsesimpleFormatElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parsepluralElement();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseselectElement();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parsepoundElement();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        peg$savedPos = peg$currPos;\n        s1 = peg$c2();\n        if (s1) {\n            s1 = undefined;\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                s3 = peg$parsequotedString();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parseunquotedString();\n                    if (s3 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 60) {\n                            s3 = peg$c3;\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c4);\n                            }\n                        }\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        s3 = peg$parsequotedString();\n                        if (s3 === peg$FAILED) {\n                            s3 = peg$parseunquotedString();\n                            if (s3 === peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 60) {\n                                    s3 = peg$c3;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s3 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c4);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c5(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsedoubleApostrophes();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parsequotedString();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parseunquotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parsenonTagStartingAngleBracket();\n                    }\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                while (s2 !== peg$FAILED) {\n                    s1.push(s2);\n                    s2 = peg$parsedoubleApostrophes();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parsequotedString();\n                        if (s2 === peg$FAILED) {\n                            s2 = peg$parseunquotedString();\n                            if (s2 === peg$FAILED) {\n                                s2 = peg$parsenonTagStartingAngleBracket();\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c5(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parsenonTagStartingAngleBracket() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parseopeningTag();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parseclosingTag();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseselfClosingTag();\n            }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n            s1 = undefined;\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n                s2 = peg$c3;\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c4);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c6();\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c7(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsepoundElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n            s1 = peg$c8;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c9);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10();\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsetagElement() {\n        var s0, s1, s2, s3;\n        peg$silentFails++;\n        s0 = peg$parseselfClosingTag();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseopeningTag();\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessage();\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseclosingTag();\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c12(s1, s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c11);\n            }\n        }\n        return s0;\n    }\n    function peg$parseselfClosingTag() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s2 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsevalidTag();\n            if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c13) {\n                        s5 = peg$c13;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        s2 = [s2, s3, s4, s5];\n                        s1 = s2;\n                    }\n                    else {\n                        peg$currPos = s1;\n                        s1 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c15(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseopeningTag() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsevalidTag();\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s3 = peg$c16;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c17);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c18(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseclosingTag() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n            s1 = peg$c19;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsevalidTag();\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 62) {\n                    s3 = peg$c16;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c17);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c18(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c22;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c24;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c25);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c26(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c21);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c28.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c29);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c28.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c30);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c27);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c32;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c33);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c34(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c31);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c36(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c37(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c38) {\n            s1 = peg$c38;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c39);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c40(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c41();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c42(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c22;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c43;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c44);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c45) {\n                                    s7 = peg$c45;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c46);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c43;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c44);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c24;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c25);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c47(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c48;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c49);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c50.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c51);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c50.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c51);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c48;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c49);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c52.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c53);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c52.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c53);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c54.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c55);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c54.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c55);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c56(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c38) {\n            s1 = peg$c38;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c39);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c40(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c57();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c42(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c22;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c43;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c44);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c58) {\n                                    s7 = peg$c58;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c59);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c60) {\n                                        s7 = peg$c60;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c61);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c43;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c44);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c24;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c25);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c47(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c22;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c43;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c44);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c62) {\n                                    s7 = peg$c62;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c63);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c64) {\n                                        s7 = peg$c64;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c65);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c43;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c44);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c66) {\n                                                    s12 = peg$c66;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c67);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c24;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c25);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c68(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c22;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c43;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c44);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c69) {\n                                    s7 = peg$c69;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c70);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c43;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c44);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c24;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c25);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c71(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c72;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c73);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c22;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c23);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c74(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c24;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c25);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c75(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c22;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c23);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c76(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c24;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c25);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c77(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsewhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c79.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c80);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c78);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c82.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c83);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c81);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsewhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c84);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c86;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c87);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c88(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c85);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c48;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c49);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c89);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c91) {\n            s1 = peg$c91;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c92);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c93();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c90);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c48;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c49);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseescapedChar();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c91) {\n                    s5 = peg$c91;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c92);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c50.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c51);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c91) {\n                        s5 = peg$c91;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c92);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c50.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c51);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c48;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c49);\n                        }\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c94(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c95(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s1 = peg$c96;\n                peg$currPos++;\n            }\n            else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c97);\n                }\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseescapedChar() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c98(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c99);\n            }\n        }\n        return s0;\n    }\n    function peg$parsevalidTag() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parsetagName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c100);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c102;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c103);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c104();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c105.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c106);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c107.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c108);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c107.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c108);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c109(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c101);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c30);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c110);\n            }\n        }\n        return s0;\n    }\n    function peg$parsetagName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s2 = peg$c86;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c87);\n            }\n        }\n        if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$currPos;\n            peg$silentFails++;\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parsepatternSyntax();\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n                s3 = undefined;\n            }\n            else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c30);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = [s3, s4];\n                    s2 = s3;\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s2 = peg$c86;\n                    peg$currPos++;\n                }\n                else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c87);\n                    }\n                }\n                if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n                    s4 = peg$parsewhiteSpace();\n                    if (s4 === peg$FAILED) {\n                        s4 = peg$parsepatternSyntax();\n                    }\n                    peg$silentFails--;\n                    if (s4 === peg$FAILED) {\n                        s3 = undefined;\n                    }\n                    else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.length > peg$currPos) {\n                            s4 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c30);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s3 = [s3, s4];\n                            s2 = s3;\n                        }\n                        else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c111);\n            }\n        }\n        return s0;\n    }\n    var messageCtx = ['root'];\n    function isNestedMessageText() {\n        return messageCtx.length > 1;\n    }\n    function isInPluralOption() {\n        return messageCtx[messageCtx.length - 1] === 'plural';\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    var ignoreTag = options && options.ignoreTag;\n    var shouldParseSkeleton = options && options.shouldParseSkeleton;\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var pegParse = peg$parse;\n"]},"metadata":{},"sourceType":"module"}