{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samtoll/Desktop/FinalProject/react-app/src/DetailPages/ShoppingCart.js\";\nimport React, { PureComponent } from 'react';\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\nimport { Cart, Product, CheckoutButton, cartLocalization, cartReducer, setCartCurrency } from \"react-shopping-cart\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"animate.css/animate.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nconst {\n  getDefaultLocalization\n} = cartLocalization; // You may take localization object from wherever you want, that's just an example\n// For more information, see localization section\n\nconst iPadCaseLocalization = {\n  color: \"Color\",\n  iPadCase: \"iPad case\",\n  red: \"Red\",\n  green: \"Green\",\n  yellow: \"Yellow\",\n  GBP: \"£\",\n  EUR: \"€\",\n  USD: \"$\"\n};\nconst iPadPropertiesWithAdditionalCostLocalization = {\n  yellow: \"Yellow (+{cost}{localizedCurrency})\"\n};\nconst store = createStore(combineReducers({\n  cart: cartReducer // Your own reducers, sir\n\n}));\nstore.dispatch(setCartCurrency(\"USD\"));\n\nclass ShoppingCart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      product: {\n        name: \"iPadCase\",\n        id: \"ipad-case\",\n        path: \"/shop/ipad-case/\",\n        properties: {\n          color: [\"red\", \"green\", {\n            additionalCost: {\n              GBP: 1,\n              EUR: 2,\n              USD: 3.5\n            },\n            value: \"yellow\"\n          }]\n        },\n        propertiesToShowInCart: [\"color\"],\n        prices: {\n          GBP: 70,\n          EUR: 80,\n          USD: 90\n        },\n        currency: \"GBP\",\n        imageSrc: \"1-483x321.jpeg\"\n      },\n      getProductLocalization: getDefaultLocalization(\"product\", \"en\", { ...iPadCaseLocalization,\n        ...iPadPropertiesWithAdditionalCostLocalization\n      }),\n      getCheckoutButtonLocalization: getDefaultLocalization(\"checkoutButton\", \"en\", iPadCaseLocalization),\n      getCartLocalization: getDefaultLocalization(\"cart\", \"en\", iPadCaseLocalization)\n    };\n  }\n\n  render() {\n    const {\n      product,\n      getCheckoutButtonLocalization,\n      getProductLocalization,\n      getCartLocalization\n    } = this.state;\n\n    const checkoutButtonElement = /*#__PURE__*/_jsxDEV(CheckoutButton, {\n      getLocalization: getCheckoutButtonLocalization,\n      checkoutURL: \"/to/my/checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Product, { ...product,\n          checkoutButton: checkoutButtonElement,\n          getLocalization: getProductLocalization\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Cart, {\n          checkoutButton: checkoutButtonElement,\n          getLocalization: getCartLocalization\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ShoppingCart;","map":{"version":3,"sources":["/Users/samtoll/Desktop/FinalProject/react-app/src/DetailPages/ShoppingCart.js"],"names":["React","PureComponent","Provider","createStore","combineReducers","Cart","Product","CheckoutButton","cartLocalization","cartReducer","setCartCurrency","getDefaultLocalization","iPadCaseLocalization","color","iPadCase","red","green","yellow","GBP","EUR","USD","iPadPropertiesWithAdditionalCostLocalization","store","cart","dispatch","ShoppingCart","state","product","name","id","path","properties","additionalCost","value","propertiesToShowInCart","prices","currency","imageSrc","getProductLocalization","getCheckoutButtonLocalization","getCartLocalization","render","checkoutButtonElement"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\nimport { Cart, Product, CheckoutButton, cartLocalization, cartReducer, setCartCurrency} from \"react-shopping-cart\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"animate.css/animate.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nconst { getDefaultLocalization } = cartLocalization;\n \n// You may take localization object from wherever you want, that's just an example\n// For more information, see localization section\nconst iPadCaseLocalization = {\n  color: \"Color\",\n  iPadCase: \"iPad case\",\n  red: \"Red\",\n  green: \"Green\",\n  yellow: \"Yellow\",\n  GBP: \"£\",\n  EUR: \"€\",\n  USD: \"$\"\n};\n \nconst iPadPropertiesWithAdditionalCostLocalization = {\n  yellow: \"Yellow (+{cost}{localizedCurrency})\"\n};\n \nconst store = createStore(\n  combineReducers({\n    cart: cartReducer\n    // Your own reducers, sir\n  })\n);\n \nstore.dispatch(setCartCurrency(\"USD\"));\n \nclass ShoppingCart extends PureComponent {\n  state = {\n    product: {\n      name: \"iPadCase\",\n      id: \"ipad-case\",\n      path: \"/shop/ipad-case/\",\n      properties: {\n        color: [\n          \"red\",\n          \"green\",\n          {\n            additionalCost: {\n              GBP: 1,\n              EUR: 2,\n              USD: 3.5\n            },\n            value: \"yellow\"\n          }\n        ]\n      },\n      propertiesToShowInCart: [\"color\"],\n      prices: { GBP: 70, EUR: 80, USD: 90 },\n      currency: \"GBP\",\n      imageSrc: \"1-483x321.jpeg\"\n    },\n    getProductLocalization: getDefaultLocalization(\"product\", \"en\", {\n      ...iPadCaseLocalization,\n      ...iPadPropertiesWithAdditionalCostLocalization\n    }),\n    getCheckoutButtonLocalization: getDefaultLocalization(\n      \"checkoutButton\",\n      \"en\",\n      iPadCaseLocalization\n    ),\n    getCartLocalization: getDefaultLocalization(\n      \"cart\",\n      \"en\",\n      iPadCaseLocalization\n    )\n  };\n \n  render() {\n    const {\n      product,\n      getCheckoutButtonLocalization,\n      getProductLocalization,\n      getCartLocalization \n    } = this.state;\n \n    const checkoutButtonElement = (\n      <CheckoutButton\n        getLocalization={getCheckoutButtonLocalization}\n        checkoutURL=\"/to/my/checkout\"\n      />\n    );\n    return (\n      <Provider store={store}>\n        <div className=\"container\">\n          <Product\n            {...product}\n            checkoutButton={checkoutButtonElement}\n            getLocalization={getProductLocalization}\n          />\n          <Cart\n            checkoutButton={checkoutButtonElement}\n            getLocalization={getCartLocalization}\n          />\n        </div>\n      </Provider>\n    );\n  }\n}\n \nexport default ShoppingCart;"]},"metadata":{},"sourceType":"module"}