{"ast":null,"code":"'use strict';\n\nvar testOrder;\nvar types = {};\nvar customCards = {};\nvar VISA = 'visa';\nvar MASTERCARD = 'master-card'; // TODO: rename to mastercard in major version bunmp\n\nvar AMERICAN_EXPRESS = 'american-express';\nvar DINERS_CLUB = 'diners-club';\nvar DISCOVER = 'discover';\nvar JCB = 'jcb';\nvar UNIONPAY = 'unionpay';\nvar MAESTRO = 'maestro';\nvar MIR = 'mir';\nvar CVV = 'CVV';\nvar CID = 'CID';\nvar CVC = 'CVC';\nvar CVN = 'CVN';\nvar CVP2 = 'CVP2';\nvar ORIGINAL_TEST_ORDER = [VISA, MASTERCARD, AMERICAN_EXPRESS, DINERS_CLUB, DISCOVER, JCB, UNIONPAY, MAESTRO, MIR];\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) {\n    return null;\n  }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n  delete dupe.prefixPattern;\n  delete dupe.exactPattern;\n  return dupe;\n}\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\ntypes[VISA] = {\n  niceType: 'Visa',\n  type: VISA,\n  prefixPattern: /^4$/,\n  exactPattern: /^4\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[MASTERCARD] = {\n  niceType: 'Mastercard',\n  type: MASTERCARD,\n  prefixPattern: /^(5|5[1-5]|2|22|222|222[1-9]|2[3-6]|27|27[0-2]|2720)$/,\n  exactPattern: /^(5[1-5]|222[1-9]|22[3-9]|2[3-6]|27[0-1]|2720)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\ntypes[AMERICAN_EXPRESS] = {\n  niceType: 'American Express',\n  type: AMERICAN_EXPRESS,\n  prefixPattern: /^(3|34|37)$/,\n  exactPattern: /^3[47]\\d*$/,\n  isAmex: true,\n  gaps: [4, 10],\n  lengths: [15],\n  code: {\n    name: CID,\n    size: 4\n  }\n};\ntypes[DINERS_CLUB] = {\n  niceType: 'Diners Club',\n  type: DINERS_CLUB,\n  prefixPattern: /^(3|3[0689]|30[0-5])$/,\n  exactPattern: /^3(0[0-5]|[689])\\d*$/,\n  gaps: [4, 10],\n  lengths: [14, 16, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[DISCOVER] = {\n  niceType: 'Discover',\n  type: DISCOVER,\n  prefixPattern: /^(6|60|601|6011|65|64|64[4-9])$/,\n  exactPattern: /^(6011|65|64[4-9])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 19],\n  code: {\n    name: CID,\n    size: 3\n  }\n};\ntypes[JCB] = {\n  niceType: 'JCB',\n  type: JCB,\n  prefixPattern: /^(2|21|213|2131|1|18|180|1800|3|35)$/,\n  exactPattern: /^(2131|1800|35)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[UNIONPAY] = {\n  niceType: 'UnionPay',\n  type: UNIONPAY,\n  prefixPattern: /^((6|62|62\\d|(621(?!83|88|98|99))|622(?!06)|627[02,06,07]|628(?!0|1)|629[1,2])|622018)$/,\n  exactPattern: /^(((620|(621(?!83|88|98|99))|622(?!06|018)|62[3-6]|627[02,06,07]|628(?!0|1)|629[1,2]))\\d*|622018\\d{12})$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVN,\n    size: 3\n  }\n};\ntypes[MAESTRO] = {\n  niceType: 'Maestro',\n  type: MAESTRO,\n  prefixPattern: /^(5|5[06-9]|6\\d*)$/,\n  exactPattern: /^(5[06-9]|6[37])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\ntypes[MIR] = {\n  niceType: 'Mir',\n  type: MIR,\n  prefixPattern: /^(2|22|220|220[0-4])$/,\n  exactPattern: /^(220[0-4])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVP2,\n    size: 3\n  }\n};\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction creditCardType(cardNumber) {\n  var type, value, i;\n  var prefixResults = [];\n  var exactResults = [];\n\n  if (!(typeof cardNumber === 'string' || cardNumber instanceof String)) {\n    return [];\n  }\n\n  for (i = 0; i < testOrder.length; i++) {\n    type = testOrder[i];\n    value = findType(type);\n\n    if (cardNumber.length === 0) {\n      prefixResults.push(clone(value));\n      continue;\n    }\n\n    if (value.exactPattern.test(cardNumber)) {\n      exactResults.push(clone(value));\n    } else if (value.prefixPattern.test(cardNumber)) {\n      prefixResults.push(clone(value));\n    }\n  }\n\n  return exactResults.length ? exactResults : prefixResults;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  MIR: MIR\n};\nmodule.exports = creditCardType;","map":{"version":3,"sources":["/Users/samtoll/Desktop/FinalProject/react-app/node_modules/credit-card-type/index.js"],"names":["testOrder","types","customCards","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","MIR","CVV","CID","CVC","CVN","CVP2","ORIGINAL_TEST_ORDER","clone","originalObject","dupe","JSON","parse","stringify","prefixPattern","exactPattern","niceType","type","gaps","lengths","code","name","size","isAmex","findType","creditCardType","cardNumber","value","i","prefixResults","exactResults","String","length","push","test","getTypeInfo","getCardPosition","ignoreErrorForNotExisting","position","indexOf","Error","removeCard","splice","addCard","config","existingCardPosition","changeOrder","currentPosition","resetModifications","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar testOrder;\nvar types = {};\nvar customCards = {};\nvar VISA = 'visa';\nvar MASTERCARD = 'master-card'; // TODO: rename to mastercard in major version bunmp\nvar AMERICAN_EXPRESS = 'american-express';\nvar DINERS_CLUB = 'diners-club';\nvar DISCOVER = 'discover';\nvar JCB = 'jcb';\nvar UNIONPAY = 'unionpay';\nvar MAESTRO = 'maestro';\nvar MIR = 'mir';\nvar CVV = 'CVV';\nvar CID = 'CID';\nvar CVC = 'CVC';\nvar CVN = 'CVN';\nvar CVP2 = 'CVP2';\nvar ORIGINAL_TEST_ORDER = [\n  VISA,\n  MASTERCARD,\n  AMERICAN_EXPRESS,\n  DINERS_CLUB,\n  DISCOVER,\n  JCB,\n  UNIONPAY,\n  MAESTRO,\n  MIR\n];\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) { return null; }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n  delete dupe.prefixPattern;\n  delete dupe.exactPattern;\n\n  return dupe;\n}\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\ntypes[VISA] = {\n  niceType: 'Visa',\n  type: VISA,\n  prefixPattern: /^4$/,\n  exactPattern: /^4\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[MASTERCARD] = {\n  niceType: 'Mastercard',\n  type: MASTERCARD,\n  prefixPattern: /^(5|5[1-5]|2|22|222|222[1-9]|2[3-6]|27|27[0-2]|2720)$/,\n  exactPattern: /^(5[1-5]|222[1-9]|22[3-9]|2[3-6]|27[0-1]|2720)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[AMERICAN_EXPRESS] = {\n  niceType: 'American Express',\n  type: AMERICAN_EXPRESS,\n  prefixPattern: /^(3|34|37)$/,\n  exactPattern: /^3[47]\\d*$/,\n  isAmex: true,\n  gaps: [4, 10],\n  lengths: [15],\n  code: {\n    name: CID,\n    size: 4\n  }\n};\n\ntypes[DINERS_CLUB] = {\n  niceType: 'Diners Club',\n  type: DINERS_CLUB,\n  prefixPattern: /^(3|3[0689]|30[0-5])$/,\n  exactPattern: /^3(0[0-5]|[689])\\d*$/,\n  gaps: [4, 10],\n  lengths: [14, 16, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[DISCOVER] = {\n  niceType: 'Discover',\n  type: DISCOVER,\n  prefixPattern: /^(6|60|601|6011|65|64|64[4-9])$/,\n  exactPattern: /^(6011|65|64[4-9])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 19],\n  code: {\n    name: CID,\n    size: 3\n  }\n};\n\ntypes[JCB] = {\n  niceType: 'JCB',\n  type: JCB,\n  prefixPattern: /^(2|21|213|2131|1|18|180|1800|3|35)$/,\n  exactPattern: /^(2131|1800|35)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[UNIONPAY] = {\n  niceType: 'UnionPay',\n  type: UNIONPAY,\n  prefixPattern: /^((6|62|62\\d|(621(?!83|88|98|99))|622(?!06)|627[02,06,07]|628(?!0|1)|629[1,2])|622018)$/,\n  exactPattern: /^(((620|(621(?!83|88|98|99))|622(?!06|018)|62[3-6]|627[02,06,07]|628(?!0|1)|629[1,2]))\\d*|622018\\d{12})$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVN,\n    size: 3\n  }\n};\n\ntypes[MAESTRO] = {\n  niceType: 'Maestro',\n  type: MAESTRO,\n  prefixPattern: /^(5|5[06-9]|6\\d*)$/,\n  exactPattern: /^(5[06-9]|6[37])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[MIR] = {\n  niceType: 'Mir',\n  type: MIR,\n  prefixPattern: /^(2|22|220|220[0-4])$/,\n  exactPattern: /^(220[0-4])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVP2,\n    size: 3\n  }\n};\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction creditCardType(cardNumber) {\n  var type, value, i;\n  var prefixResults = [];\n  var exactResults = [];\n\n  if (!(typeof cardNumber === 'string' || cardNumber instanceof String)) {\n    return [];\n  }\n\n  for (i = 0; i < testOrder.length; i++) {\n    type = testOrder[i];\n    value = findType(type);\n\n    if (cardNumber.length === 0) {\n      prefixResults.push(clone(value));\n      continue;\n    }\n\n    if (value.exactPattern.test(cardNumber)) {\n      exactResults.push(clone(value));\n    } else if (value.prefixPattern.test(cardNumber)) {\n      prefixResults.push(clone(value));\n    }\n  }\n\n  return exactResults.length ? exactResults : prefixResults;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  MIR: MIR\n};\n\nmodule.exports = creditCardType;\n"]},"metadata":{},"sourceType":"script"}