{"ast":null,"code":"import { __extends } from \"tslib\";\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\"; // When value supplied is invalid\n\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\"; // When we need specific Intl API but it's not available\n\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\n\nvar FormatError =\n/** @class */\nfunction (_super) {\n  __extends(FormatError, _super);\n\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \" + this.code + \"] \" + this.message;\n  };\n\n  return FormatError;\n}(Error);\n\nexport { FormatError };\n\nvar InvalidValueError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidValueError, _super);\n\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\" + variableId + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(options).join('\", \"') + \"\\\"\", \"INVALID_VALUE\"\n    /* INVALID_VALUE */\n    , originalMessage) || this;\n  }\n\n  return InvalidValueError;\n}(FormatError);\n\nexport { InvalidValueError };\n\nvar InvalidValueTypeError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidValueTypeError, _super);\n\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\" + value + \"\\\" must be of type \" + type, \"INVALID_VALUE\"\n    /* INVALID_VALUE */\n    , originalMessage) || this;\n  }\n\n  return InvalidValueTypeError;\n}(FormatError);\n\nexport { InvalidValueTypeError };\n\nvar MissingValueError =\n/** @class */\nfunction (_super) {\n  __extends(MissingValueError, _super);\n\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\" + variableId + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\", \"MISSING_VALUE\"\n    /* MISSING_VALUE */\n    , originalMessage) || this;\n  }\n\n  return MissingValueError;\n}(FormatError);\n\nexport { MissingValueError };","map":{"version":3,"sources":["/Users/samtoll/Desktop/FinalProject/react-app/node_modules/intl-messageformat/lib/src/error.js"],"names":["__extends","ErrorCode","FormatError","_super","msg","code","originalMessage","_this","call","prototype","toString","message","Error","InvalidValueError","variableId","value","options","Object","keys","join","InvalidValueTypeError","type","MissingValueError"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,IAAIC,SAAJ;;AACP,CAAC,UAAUA,SAAV,EAAqB;AAClB;AACAA,EAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAFkB,CAGlB;;AACAA,EAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAJkB,CAKlB;;AACAA,EAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC;AACH,CAPD,EAOGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAPZ;;AAQA,IAAIC,WAAW;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC/CH,EAAAA,SAAS,CAACE,WAAD,EAAcC,MAAd,CAAT;;AACA,WAASD,WAAT,CAAqBE,GAArB,EAA0BC,IAA1B,EAAgCC,eAAhC,EAAiD;AAC7C,QAAIC,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkBJ,GAAlB,KAA0B,IAAtC;;AACAG,IAAAA,KAAK,CAACF,IAAN,GAAaA,IAAb;AACAE,IAAAA,KAAK,CAACD,eAAN,GAAwBA,eAAxB;AACA,WAAOC,KAAP;AACH;;AACDL,EAAAA,WAAW,CAACO,SAAZ,CAAsBC,QAAtB,GAAiC,YAAY;AACzC,WAAO,sBAAsB,KAAKL,IAA3B,GAAkC,IAAlC,GAAyC,KAAKM,OAArD;AACH,GAFD;;AAGA,SAAOT,WAAP;AACH,CAZgC,CAY/BU,KAZ+B,CAAjC;;AAaA,SAASV,WAAT;;AACA,IAAIW,iBAAiB;AAAG;AAAe,UAAUV,MAAV,EAAkB;AACrDH,EAAAA,SAAS,CAACa,iBAAD,EAAoBV,MAApB,CAAT;;AACA,WAASU,iBAAT,CAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,OAA9C,EAAuDV,eAAvD,EAAwE;AACpE,WAAOH,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkB,0BAA0BM,UAA1B,GAAuC,QAAvC,GAAkDC,KAAlD,GAA0D,oBAA1D,GAAiFE,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,IAArB,CAA0B,MAA1B,CAAjF,GAAqH,IAAvI,EAA6I;AAAgB;AAA7J,MAAkLb,eAAlL,KAAsM,IAA7M;AACH;;AACD,SAAOO,iBAAP;AACH,CANsC,CAMrCX,WANqC,CAAvC;;AAOA,SAASW,iBAAT;;AACA,IAAIO,qBAAqB;AAAG;AAAe,UAAUjB,MAAV,EAAkB;AACzDH,EAAAA,SAAS,CAACoB,qBAAD,EAAwBjB,MAAxB,CAAT;;AACA,WAASiB,qBAAT,CAA+BL,KAA/B,EAAsCM,IAAtC,EAA4Cf,eAA5C,EAA6D;AACzD,WAAOH,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkB,iBAAiBO,KAAjB,GAAyB,qBAAzB,GAAiDM,IAAnE,EAAyE;AAAgB;AAAzF,MAA8Gf,eAA9G,KAAkI,IAAzI;AACH;;AACD,SAAOc,qBAAP;AACH,CAN0C,CAMzClB,WANyC,CAA3C;;AAOA,SAASkB,qBAAT;;AACA,IAAIE,iBAAiB;AAAG;AAAe,UAAUnB,MAAV,EAAkB;AACrDH,EAAAA,SAAS,CAACsB,iBAAD,EAAoBnB,MAApB,CAAT;;AACA,WAASmB,iBAAT,CAA2BR,UAA3B,EAAuCR,eAAvC,EAAwD;AACpD,WAAOH,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkB,wCAAwCM,UAAxC,GAAqD,sCAArD,GAA8FR,eAA9F,GAAgH,IAAlI,EAAwI;AAAgB;AAAxJ,MAA6KA,eAA7K,KAAiM,IAAxM;AACH;;AACD,SAAOgB,iBAAP;AACH,CANsC,CAMrCpB,WANqC,CAAvC;;AAOA,SAASoB,iBAAT","sourcesContent":["import { __extends } from \"tslib\";\nexport var ErrorCode;\n(function (ErrorCode) {\n    // When we have a placeholder but no value to format\n    ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n    // When value supplied is invalid\n    ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n    // When we need specific Intl API but it's not available\n    ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(msg, code, originalMessage) {\n        var _this = _super.call(this, msg) || this;\n        _this.code = code;\n        _this.originalMessage = originalMessage;\n        return _this;\n    }\n    FormatError.prototype.toString = function () {\n        return \"[formatjs Error: \" + this.code + \"] \" + this.message;\n    };\n    return FormatError;\n}(Error));\nexport { FormatError };\nvar InvalidValueError = /** @class */ (function (_super) {\n    __extends(InvalidValueError, _super);\n    function InvalidValueError(variableId, value, options, originalMessage) {\n        return _super.call(this, \"Invalid values for \\\"\" + variableId + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(options).join('\", \"') + \"\\\"\", \"INVALID_VALUE\" /* INVALID_VALUE */, originalMessage) || this;\n    }\n    return InvalidValueError;\n}(FormatError));\nexport { InvalidValueError };\nvar InvalidValueTypeError = /** @class */ (function (_super) {\n    __extends(InvalidValueTypeError, _super);\n    function InvalidValueTypeError(value, type, originalMessage) {\n        return _super.call(this, \"Value for \\\"\" + value + \"\\\" must be of type \" + type, \"INVALID_VALUE\" /* INVALID_VALUE */, originalMessage) || this;\n    }\n    return InvalidValueTypeError;\n}(FormatError));\nexport { InvalidValueTypeError };\nvar MissingValueError = /** @class */ (function (_super) {\n    __extends(MissingValueError, _super);\n    function MissingValueError(variableId, originalMessage) {\n        return _super.call(this, \"The intl string context variable \\\"\" + variableId + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\", \"MISSING_VALUE\" /* MISSING_VALUE */, originalMessage) || this;\n    }\n    return MissingValueError;\n}(FormatError));\nexport { MissingValueError };\n"]},"metadata":{},"sourceType":"module"}